/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Monitor_H
#define Monitor_H

#include <thrift/TDispatchProcessor.h>
#include "client_types.h"



class MonitorIf {
 public:
  virtual ~MonitorIf() {}
  virtual int32_t report(const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json) = 0;
  virtual int32_t send(const int64_t time, const std::string& ip, const std::string& json) = 0;
  virtual void get(std::string& _return, const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json) = 0;
};

class MonitorIfFactory {
 public:
  typedef MonitorIf Handler;

  virtual ~MonitorIfFactory() {}

  virtual MonitorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MonitorIf* /* handler */) = 0;
};

class MonitorIfSingletonFactory : virtual public MonitorIfFactory {
 public:
  MonitorIfSingletonFactory(const boost::shared_ptr<MonitorIf>& iface) : iface_(iface) {}
  virtual ~MonitorIfSingletonFactory() {}

  virtual MonitorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MonitorIf* /* handler */) {}

 protected:
  boost::shared_ptr<MonitorIf> iface_;
};

class MonitorNull : virtual public MonitorIf {
 public:
  virtual ~MonitorNull() {}
  int32_t report(const std::string& /* ip */, const int64_t /* time */, const int32_t /* reportId */, const std::string& /* json */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t send(const int64_t /* time */, const std::string& /* ip */, const std::string& /* json */) {
    int32_t _return = 0;
    return _return;
  }
  void get(std::string& /* _return */, const std::string& /* ip */, const int64_t /* time */, const int32_t /* reportId */, const std::string& /* json */) {
    return;
  }
};

typedef struct _Monitor_report_args__isset {
  _Monitor_report_args__isset() : ip(false), time(false), reportId(false), json(false) {}
  bool ip;
  bool time;
  bool reportId;
  bool json;
} _Monitor_report_args__isset;

class Monitor_report_args {
 public:

  Monitor_report_args() : ip(), time(0), reportId(0), json() {
  }

  virtual ~Monitor_report_args() throw() {}

  std::string ip;
  int64_t time;
  int32_t reportId;
  std::string json;

  _Monitor_report_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_reportId(const int32_t val) {
    reportId = val;
  }

  void __set_json(const std::string& val) {
    json = val;
  }

  bool operator == (const Monitor_report_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(reportId == rhs.reportId))
      return false;
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const Monitor_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitor_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitor_report_pargs {
 public:


  virtual ~Monitor_report_pargs() throw() {}

  const std::string* ip;
  const int64_t* time;
  const int32_t* reportId;
  const std::string* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitor_report_result__isset {
  _Monitor_report_result__isset() : success(false) {}
  bool success;
} _Monitor_report_result__isset;

class Monitor_report_result {
 public:

  Monitor_report_result() : success(0) {
  }

  virtual ~Monitor_report_result() throw() {}

  int32_t success;

  _Monitor_report_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Monitor_report_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitor_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitor_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitor_report_presult__isset {
  _Monitor_report_presult__isset() : success(false) {}
  bool success;
} _Monitor_report_presult__isset;

class Monitor_report_presult {
 public:


  virtual ~Monitor_report_presult() throw() {}

  int32_t* success;

  _Monitor_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Monitor_send_args__isset {
  _Monitor_send_args__isset() : time(false), ip(false), json(false) {}
  bool time;
  bool ip;
  bool json;
} _Monitor_send_args__isset;

class Monitor_send_args {
 public:

  Monitor_send_args() : time(0), ip(), json() {
  }

  virtual ~Monitor_send_args() throw() {}

  int64_t time;
  std::string ip;
  std::string json;

  _Monitor_send_args__isset __isset;

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_json(const std::string& val) {
    json = val;
  }

  bool operator == (const Monitor_send_args & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const Monitor_send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitor_send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitor_send_pargs {
 public:


  virtual ~Monitor_send_pargs() throw() {}

  const int64_t* time;
  const std::string* ip;
  const std::string* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitor_send_result__isset {
  _Monitor_send_result__isset() : success(false) {}
  bool success;
} _Monitor_send_result__isset;

class Monitor_send_result {
 public:

  Monitor_send_result() : success(0) {
  }

  virtual ~Monitor_send_result() throw() {}

  int32_t success;

  _Monitor_send_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Monitor_send_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitor_send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitor_send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitor_send_presult__isset {
  _Monitor_send_presult__isset() : success(false) {}
  bool success;
} _Monitor_send_presult__isset;

class Monitor_send_presult {
 public:


  virtual ~Monitor_send_presult() throw() {}

  int32_t* success;

  _Monitor_send_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Monitor_get_args__isset {
  _Monitor_get_args__isset() : ip(false), time(false), reportId(false), json(false) {}
  bool ip;
  bool time;
  bool reportId;
  bool json;
} _Monitor_get_args__isset;

class Monitor_get_args {
 public:

  Monitor_get_args() : ip(), time(0), reportId(0), json() {
  }

  virtual ~Monitor_get_args() throw() {}

  std::string ip;
  int64_t time;
  int32_t reportId;
  std::string json;

  _Monitor_get_args__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_reportId(const int32_t val) {
    reportId = val;
  }

  void __set_json(const std::string& val) {
    json = val;
  }

  bool operator == (const Monitor_get_args & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(reportId == rhs.reportId))
      return false;
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const Monitor_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitor_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Monitor_get_pargs {
 public:


  virtual ~Monitor_get_pargs() throw() {}

  const std::string* ip;
  const int64_t* time;
  const int32_t* reportId;
  const std::string* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitor_get_result__isset {
  _Monitor_get_result__isset() : success(false) {}
  bool success;
} _Monitor_get_result__isset;

class Monitor_get_result {
 public:

  Monitor_get_result() : success() {
  }

  virtual ~Monitor_get_result() throw() {}

  std::string success;

  _Monitor_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Monitor_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Monitor_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Monitor_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Monitor_get_presult__isset {
  _Monitor_get_presult__isset() : success(false) {}
  bool success;
} _Monitor_get_presult__isset;

class Monitor_get_presult {
 public:


  virtual ~Monitor_get_presult() throw() {}

  std::string* success;

  _Monitor_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MonitorClient : virtual public MonitorIf {
 public:
  MonitorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MonitorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t report(const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json);
  void send_report(const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json);
  int32_t recv_report();
  int32_t send(const int64_t time, const std::string& ip, const std::string& json);
  void send_send(const int64_t time, const std::string& ip, const std::string& json);
  int32_t recv_send();
  void get(std::string& _return, const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json);
  void send_get(const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json);
  void recv_get(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MonitorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MonitorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MonitorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MonitorProcessor(boost::shared_ptr<MonitorIf> iface) :
    iface_(iface) {
    processMap_["report"] = &MonitorProcessor::process_report;
    processMap_["send"] = &MonitorProcessor::process_send;
    processMap_["get"] = &MonitorProcessor::process_get;
  }

  virtual ~MonitorProcessor() {}
};

class MonitorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MonitorProcessorFactory(const ::boost::shared_ptr< MonitorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MonitorIfFactory > handlerFactory_;
};

class MonitorMultiface : virtual public MonitorIf {
 public:
  MonitorMultiface(std::vector<boost::shared_ptr<MonitorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MonitorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MonitorIf> > ifaces_;
  MonitorMultiface() {}
  void add(boost::shared_ptr<MonitorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t report(const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report(ip, time, reportId, json);
    }
    return ifaces_[i]->report(ip, time, reportId, json);
  }

  int32_t send(const int64_t time, const std::string& ip, const std::string& json) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send(time, ip, json);
    }
    return ifaces_[i]->send(time, ip, json);
  }

  void get(std::string& _return, const std::string& ip, const int64_t time, const int32_t reportId, const std::string& json) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, ip, time, reportId, json);
    }
    ifaces_[i]->get(_return, ip, time, reportId, json);
    return;
  }

};



#endif
